//
// This file is part of the GNU ARM Eclipse distribution.
// Copyright (c) 2014 Liviu Ionescu.
//

// ----------------------------------------------------------------------------

#include <stdio.h>
#include <stdlib.h>
#include "diag/Trace.h"

#include "stm32f10x.h"

#include "Timer/Timer.h"
#include "I2Cdev/I2C.h"
#include "I2Cdev/I2Cdev.h"
#include "MPU6050/MPU6050.h"
#include "MAX17205/MAX17205.h"
#include "LED/LED.h"
#include "BT/BT.h"
#include "fatfs/ff.h"
#include "Audio/Audio.h"
#include "Power/Power.h"
#include "Button/Button.h"

Button* btn;

MPU6050 gyro;
int32_t rot;

#define STEP 128

void LEDPWM()
{
    static double h = 0;

    if (h >= 1.0)
        h = 0;
    else
        h += 0.01;

    sLed.Set(HSL(h, 1, 0.5));
}

void BTRX(uint8_t* data, uint32_t len)
{
	trace_printf("BTRX: %u\n", len);

	switch(data[0])
	{
	case 'R':
		sLed.Set(RGB(255, 0, 0));
		break;
	case 'G':
		sLed.Set(RGB(0, 255, 0));
		break;
	case 'B':
		sLed.Set(RGB(0, 0, 255));
		break;
	default:
		sLed.Set(RGB(0, 0, 0));
	}
}

FRESULT scan_files (
    char* path        /* Start node to be scanned (***also used as work area***) */
)
{
    FRESULT res;
    DIR dir;
    UINT i;
    static FILINFO fno;


    res = f_opendir(&dir, path);                       /* Open the directory */
    if (res == FR_OK) {
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
                i = strlen(path);
                sprintf(&path[i], "/%s", fno.fname);
                res = scan_files(path);                    /* Enter the directory */
                if (res != FR_OK) break;
                path[i] = 0;
            } else {                                       /* It is a file. */
            	trace_printf("%s/%s\n", path, fno.fname);
            }
        }
        f_closedir(&dir);
    }

    return res;
}

bool CheckI2CAddress(I2C_TypeDef* I2Cx, uint8_t slaveAddress)
{
	// Wait until I2C module is idle:
	//while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));

	// Generate the start condition
	I2C_GenerateSTART(I2Cx, ENABLE);
	//
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_MODE_SELECT));

	//Send the address of the slave to be contacted:
	I2C_Send7bitAddress(I2Cx, slaveAddress<<1, I2C_Direction_Transmitter);

	//If this is a write operation, set I2C for transmit
	uint32_t timeout = 0xFFF;
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
	{
		if (--timeout == 0)
			break;
	}

	if (timeout == 0)
		return false;
	else
		return true;
}

void ReportBatteryStats()
{
	trace_printf("Voltage: %.2f V, Current: %.1f mA, AvgCurrent: %.1f mA, SOC: %.1f %\n", sBatt.GetVoltage(), sBatt.GetCurrent(), sBatt.GetAvgCurrent(), sBatt.GetSOC());
	trace_printf("Cell1: %.2f V, Cell2: %.2f V, Cell3: %.2f V, Cell4: %.2f\n", sBatt.GetCellVoltage(0), sBatt.GetCellVoltage(1), sBatt.GetCellVoltage(2), sBatt.GetCellVoltage(3));
}

uint32_t sHum;

void PlayHum()
{
	trace_printf("HUM");
	sHum = sAudio.Play("hum.wav", 1, true);
}

#define GYRO_INTERVAL 30
#define SWING_THRESHOLD 10000
#define SWING_DELAY 1000

uint32_t tSwing; // Swing timer
int sSwing; // Swing sound
int16_t ax, ay, az;
int16_t gx, gy, gz;

bool swingMutex = false;

void CheckSwing()
{
	gyro.getRotation(&gx, &gy, &gz);

	//trace_printf("%d %d %d\n", gx, gy, gz);

	rot += (abs(gx) + abs(gy) + abs(gz) - rot)/4;

	//trace_printf("%d\n", d);

	/*if (rot > SWING_THRESHOLD && !swingMutex)
	{
		sAudio.Play("swing3.wav", 0);
		swingMutex = true;

		// Restart timer after delay
		Timer::SetTimeout([](){
			swingMutex = false;
		}, SWING_DELAY);
	}*/

	sAudio.Atten(sSwing, max(0, 40000/rot - 1));

	//sAudio.Play("3swing32k.wav");
}

void PowerOff()
{
	sPower.PowerOff();
}

// program states
enum ProgramState
{
	STATE_ON,
	STATE_MODE_SELECT_PRE,
	STATE_MODE_SELECT,
	STATE_COLOR_SELECT_PRE,
	STATE_COLOR_SELECT,
	STATE_LIGHTNESS_SELECT_PRE,
	STATE_LIGHTNESS_SELECT,
	STATE_EXIT_CONFIG,
	STATE_NULL
};

uint8_t state = STATE_ON;

#define LONG_PRESS 1500

HSL color(0.5f, 1.0f, 0.005f);

// modes
enum
{
  MODE_SOLID,
  MODE_FLICKER,
  MODE_RAINBOW,
  MODE_END
};

uint8_t mode = MODE_FLICKER;

struct Config
{
	Color& color;
	uint8_t& mode;
} config{color, mode};

void LoadConfig()
{
	trace_printf("File size: %u\n", sizeof(Config));
	FIL fil;
	UINT size;

    // Open file
	FRESULT fr = f_open(&fil, "config.bin", FA_READ);

    if (fr)
    	return;

    // Read data
    f_read(&fil, (void*)&config, sizeof(Config), &size);

    // Close
    f_close(&fil);
}

void SaveConfig()
{
	FIL fil;
	UINT size;

	// Open file
	FRESULT fr = f_open(&fil, "config.bin", FA_WRITE | FA_CREATE_ALWAYS);

	if (fr)
		return;

	// Write data
	//f_write(&fil, (void*)&config, sizeof(Config), &size);
	f_puts("testblabla", &fil);

	// Close
	f_close(&fil);
}

#define COLOR_SELECT_DELAY 80

void ColorSelectTick()
{
	sLed.Set(HSL(color.h, 1, color.l));

	if (color.h >= 1)
		color.h = 0;
	else
		color.h += 0.005;
}

#define LIGHTNESS_SELECT_DELAY 50

void LightnessSelectTick()
{
	static bool lightnessDirection = false;

	if (lightnessDirection)
		color.l += 0.005;
	else
		color.l -= 0.005;

	if (color.l <= 0.01) {
		color.l = 0.01;
		lightnessDirection = true;
	} else if (color.l >= 1) {
		color.l = 1;
		lightnessDirection = false;
	}

	// Only update color with mode solid. Other modes have their own update timers
	if (mode == MODE_SOLID)
		sLed.Set(color);
}

#define MODE_RAINBOW_DELAY 10

#define MODE_FLICKER_DELAY 10
#define MODE_FLICKER_CHANCE 20
#define MODE_FLICKER_ALPHA 0.96f
#define MODE_FLICKER_ALPHA_GYRO 3000.0f

void UpdateMode()
{
	static uint32_t tRainbow = NO_TIMER_AVAILABLE;
	static uint32_t tFlicker = NO_TIMER_AVAILABLE;

	Timer::ClearTimeout(tRainbow);
	tRainbow = NO_TIMER_AVAILABLE;
	Timer::ClearTimeout(tFlicker);
	tFlicker = NO_TIMER_AVAILABLE;

	switch(mode)
	{
		case MODE_SOLID:
		{
			sLed.Set(color);
			break;
		}
		case MODE_RAINBOW:
		{
			tRainbow = Timer::SetInterval([](){
				static float hue = 0;

				sLed.Set(HSL(hue, 1, color.l));

				if (hue >= 1)
					hue = 0;
				else
					hue += 0.01;
			}, MODE_RAINBOW_DELAY);

			break;
		}
		case MODE_FLICKER:
		{
			tFlicker = Timer::SetInterval([](){
				if (RandomInt(0, 100) < MODE_FLICKER_CHANCE)
					sLed.Set(HSL(color.h, color.s, color.l * MODE_FLICKER_ALPHA * min(1.0f, MODE_FLICKER_ALPHA_GYRO/double(rot))));
				else
				    sLed.Set(color);
			}, MODE_FLICKER_DELAY);

			break;
		}
	}
}

#define SETTINGS_COLOR HSL(1.0f/6.0f, 1.0f, 0.3f)

void Loop()
{
	static uint32_t tColorSelect, tLightnessSelect;

	Timer::FireCallbacks();
	//BT::getInstance().Update();
	sAudio.Update();
	btn->read();

	switch (state)
	{
		case STATE_ON:
		{
			if (btn->wasReleased())
			{
				//SaveConfig();

				sAudio.Stop(sHum);
				sAudio.Stop(sSwing);
				sAudio.Play("off.wav", 1);

				Timer::SetTimeout(PowerOff, 1500);
			}
			else if (btn->pressedFor(LONG_PRESS))
			{
				// Reset lightness for config
				color.l = 0.5;

				// Set state to null while blinking
				state = STATE_NULL;

				// Blink and change state after finished
				sLed.BlinkAsync(SETTINGS_COLOR, []() {
					UpdateMode();
					state = STATE_MODE_SELECT;
				});

				// Play sfx
				//sAudio.Play("ui/mode.wav");
			}

			break;
		}
		case STATE_MODE_SELECT_PRE:
		{
			if (btn->wasReleased())
				state = STATE_MODE_SELECT;

			break;
		}
		case STATE_MODE_SELECT:
		{
			if (btn->wasReleased())
			{
				mode = mode == MODE_END-1 ? MODE_SOLID : mode+1;
				UpdateMode();
			}
			else if (btn->pressedFor(LONG_PRESS))
			{
				// Set state to null while blinking
				if (mode != MODE_RAINBOW)
				{
					state = STATE_COLOR_SELECT_PRE;

					// Play sfx
					//sAudio.Play("ui/color.wav");
				}
				else
				{
					state = STATE_LIGHTNESS_SELECT_PRE;

					// Play sfx
					//sAudio.Play("ui/lightness.wav");
				}

				// Blink and change state after finished
				sLed.BlinkAsync(SETTINGS_COLOR, []() {
					UpdateMode();
				});
			}
			break;
			// Temporary state to reset long press
		}
		case STATE_COLOR_SELECT_PRE:
		{
			if (btn->wasReleased())
			{
				trace_printf("State: STATE_COLOR_SELECT");
				state = STATE_COLOR_SELECT;
				tColorSelect = Timer::SetInterval(ColorSelectTick, COLOR_SELECT_DELAY);
				sAudio.Play("off.wav", 1);
			}
			break;
		}
		case STATE_COLOR_SELECT:
		{
			if (btn->wasPressed()) {
				Timer::ClearTimeout(tColorSelect);
			} else if (btn->wasReleased()) {
				tColorSelect = Timer::SetInterval(ColorSelectTick, COLOR_SELECT_DELAY);
			} else if (btn->pressedFor(LONG_PRESS)) {
				// Set state to null while blinking
				state = STATE_LIGHTNESS_SELECT_PRE;

				sLed.BlinkAsync(SETTINGS_COLOR, []() {
					UpdateMode();
				});

				// Play sfx
				//sAudio.Play("ui/lightness.wav");
			}
			break;
			// Temporary state to reset long press
		}
		case STATE_LIGHTNESS_SELECT_PRE:
		{
			if (btn->wasReleased())
			{
				state = STATE_LIGHTNESS_SELECT;
				tLightnessSelect = Timer::SetInterval(LightnessSelectTick, LIGHTNESS_SELECT_DELAY);
			}
			break;
		}
		case STATE_LIGHTNESS_SELECT:
		{
			if (btn->wasPressed()) {
				Timer::ClearTimeout(tLightnessSelect);
			} else if (btn->wasReleased()) {
				tLightnessSelect = Timer::SetInterval(LightnessSelectTick, LIGHTNESS_SELECT_DELAY);
			} else if (btn->pressedFor(LONG_PRESS)) {
				// Set state to null while blinking
				state = STATE_EXIT_CONFIG;

				sLed.BlinkAsync(SETTINGS_COLOR, []() {
					UpdateMode();
				});
			}
			break;
		}
		case STATE_EXIT_CONFIG:
		{
			if (btn->wasReleased())
			{
				state = STATE_ON;
			}
			break;
		}
	}

}

__IO uint16_t ADCBuff[2];

void TestADC()
{
	  ADC_InitTypeDef  ADC_InitStructure;
	  /* PCLK2 is the APB2 clock */
	  /* ADCCLK = PCLK2/6 = 72/6 = 12MHz*/
	  RCC_ADCCLKConfig(RCC_PCLK2_Div6);

	  /* Enable ADC1 clock so that we can talk to it */
	  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC3 , ENABLE);
	  /* Put everything back to power-on default2s */

	    // ADC GPIO Config
	    GPIO_InitTypeDef GPIO_InitStructure;
	    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
	    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
	    GPIO_Init(GPIOC, &GPIO_InitStructure);
	  ADC_DeInit(ADC3);

	  /* ADC1 Configuration ------------------------------------------------------*/
	  /* ADC1 and ADC2 operate independently */
	  ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
	  /* Disable the scan conversion so we do one at a time */
	  ADC_InitStructure.ADC_ScanConvMode = DISABLE;
	  /* Don't do contimuous conversions - do them on demand */
	  ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
	  /* Start conversin by software, not an external trigger */
	  ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
	  /* Conversions are 12 bit - put them in the lower 12 bits of the result */
	  ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
	  /* Say how many channels would be used by the sequencer */
	  ADC_InitStructure.ADC_NbrOfChannel = 1;

	  /* Now do the setup */
	  ADC_Init(ADC3, &ADC_InitStructure);

	  ADC_TempSensorVrefintCmd(ENABLE);

	  /* Enable ADC1 */
	  ADC_Cmd(ADC3, ENABLE);

	  /* Enable ADC1 reset calibaration register */
	  ADC_ResetCalibration(ADC3);
	  /* Check the end of ADC1 reset calibration register */
	  while(ADC_GetResetCalibrationStatus(ADC3));
	  /* Start ADC1 calibaration */
	  ADC_StartCalibration(ADC3);
	  /* Check the end of ADC1 calibration */
	  while(ADC_GetCalibrationStatus(ADC3));
}

u16 readADC1(u8 channel)
{
  ADC_RegularChannelConfig(ADC3, channel, 1, ADC_SampleTime_1Cycles5);
  // Start the conversion
  ADC_SoftwareStartConvCmd(ADC3, ENABLE);
  // Wait until conversion completion
  while(ADC_GetFlagStatus(ADC3, ADC_FLAG_EOC) == RESET);
  // Get the conversion value
  return ADC_GetConversionValue(ADC3);
}

/*void TestADC()
{
    // Enable peripherals
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);

    // Set ADC clock
    RCC_ADCCLKConfig(RCC_PCLK2_Div4); //ADCCLK = PCLK22/6 = 72/6=12MHz

    // ADC GPIO Config
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
    GPIO_Init(GPIOC, &GPIO_InitStructure);

    // ADC DMA Config
    DMA_DeInit(DMA1_Channel1);
    DMA_InitTypeDef   DMA_InitStructure;
    DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) &ADC1->DR;
    DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)&ADCBuff[0];
    DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
    DMA_InitStructure.DMA_BufferSize = 2;
    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
    DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
    DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
    DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
    DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
    DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
    DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
    DMA_Init(DMA1_Channel1, &DMA_InitStructure);

    // Enable DMA
    DMA_Cmd(DMA1_Channel1, ENABLE);

    // Reset
    ADC_DeInit(ADC1);

    // ADC Config
    ADC_InitTypeDef ADC_InitStructure;
    ADC_InitStructure.ADC_Mode = ADC_Mode_Independent; //Independent conversion mode (single)
    ADC_InitStructure.ADC_ScanConvMode = ENABLE; // Convert sequentially
    ADC_InitStructure.ADC_ContinuousConvMode = ENABLE; // Convert continuously
    ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None; // No external triggering
    ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right; // Right 12-bit data alignment
    ADC_InitStructure.ADC_NbrOfChannel = 2; // 2 channel conversion
    ADC_Init(ADC1, &ADC_InitStructure);

    // Init both channels
    ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 1, ADC_SampleTime_239Cycles5);
    ADC_RegularChannelConfig(ADC1, ADC_Channel_11, 2, ADC_SampleTime_239Cycles5);

    // Enable ADC1 DMA
    ADC_DMACmd(ADC1, ENABLE);

    // Enable ADC1
    ADC_Cmd(ADC1, ENABLE); //Enable ADC1

    // Reset calibration
    ADC_ResetCalibration(ADC1);

    // Wait for completion
    while(ADC_GetResetCalibrationStatus(ADC1));

    // Start ADC1 calibration
    ADC_StartCalibration(ADC1);

    // Wait for calibration to complete
    while(ADC_GetCalibrationStatus(ADC1));

    // Start conversion
    ADC_SoftwareStartConvCmd(ADC1, ENABLE);

    DMA_ITConfig(DMA1_Channel1, DMA_IT_TC, ENABLE);
    NVIC_EnableIRQ(DMA1_Channel1_IRQn);
}*/

extern "C" void  DMA1_Channel1_IRQHandler(void)
{
	trace_printf("DING\n");
}

int main(int argc, char* argv[])
{
    // At this stage the system clock should have already been configured at high speed.

	// Quickly latch power
	sPower.Init();

    //trace_printf("System clock: %u Hz\n", SystemCoreClock);
    Timer::Start();

    // Init leds early to prevent partial mosfet conduction
    sLed.Init();

    //trace_printf("I2C Init\n");
    I2C1_Initialize();

    // Init battery monitor
    sBatt.Init();

    trace_printf("SOC: %.2f\n", sBatt.GetSOC());

    // Power manager will turn off device if conidtions are not met
    sPower.CheckOnConditions();

    // Main button
    btn = new Button(RCC_APB2Periph_GPIOA, GPIOA, GPIO_Pin_6, false, false, 20);

    // Initialize file system
    FATFS fs;

	int status = f_mount(&fs, "0", 1);

	if (status != FR_OK)
	{
		trace_printf("Mount failed! %u\n", status);
		sLed.Blink(RGB(255, 0, 0));
		sPower.PowerOff();
	}

	// Load config
	//LoadConfig();

	// Initialize gyro
	gyro.initialize();

	// Init audio
	sAudio.Init();

	// Play turn on sound
	sAudio.Play("on.wav", 2);

	// Start hum after delay
	int t = Timer::SetTimeout(PlayHum, 500);
	trace_printf("Hum: %u\n", t);

	// Start swing detection
	tSwing = Timer::SetInterval(CheckSwing, GYRO_INTERVAL);
	trace_printf("Swing: %u\n", tSwing);

	// Start swing sound
	sSwing = sAudio.Play("high.wav", 12, true);

	// Light on!
	UpdateMode();

	// Reset button
	btn->read();
	btn->read();

	// Statistics
	Timer::SetInterval(ReportBatteryStats, 1000);

	/*sBatt.WriteReg(REG_nFilterCfg, 0x0EA4);
	trace_printf("Temp: %.4f\n", sBatt.GetInternalTemp());
	uint16_t val = sBatt.ReadReg(REG_nFilterCfg);
	nFilterCfg cfg;
	memcpy(&cfg, &val, 2);
	trace_printf("Size: %u, Val: %u, TEMP: %u, MIX: %u, VOLT: %u, CURR: %u\n", sizeof(nFilterCfg), val, cfg.TEMP, cfg.MIX, cfg.VOLT, cfg.CURR);*/

	//sBatt.FuelGaugeReset();

	/*uint16_t val = sBatt.ReadReg(REG_PackCfg);
	nPackCfg cfg;
	memcpy(&cfg, &val, 2);
	trace_printf("Val: %u, TdEn: %u, NCELLS: %u\n", val, cfg.TdEn, cfg.NCELLS);
	cfg.NCELLS = 3;
	cfg.ChEn = 1;
	memcpy(&val, &cfg, 2);
	sBatt.WriteReg(REG_PackCfg, val);*/

    while(1)
    {
    	Loop();
    }

    return 0;
}

/*
 	 trace_printf("I2C Init\n");
    //led.SetVal(255, 255, 255);

    I2C1_Initialize();

    for (int i = 0; i < 0x7F; ++i)
    {
    	if (CheckI2CAddress(I2C1, i))
    		trace_printf("Addr: %u\n", i);
    }

    gyro.initialize();
    BT::getInstance().Init();
    BT::getInstance().SetRXCB(BTRX);
    BT::getInstance().SetCMDMode(false);

    trace_printf("Waiting\n");

    trace_printf("Testcon: %u\n", gyro.getDeviceID());

    sLed.Init();
    //Timer::SetInterval(Test, 10);
    //Timer::SetInterval(LEDPWM, 10);
    //Timer::SetInterval(BTTEST, 1000);
    //Timer::SetInterval(BTTEST2, 1200);

    MAX17205 max;
    uint16_t devName = max.ReadReg(0x21);
    trace_printf("DevName: %u\nName: %u\nRev: %u\n", devName, devName & 0xF, devName >> 4);

    float temp = max.GetInternalTemp();
    trace_printf("Temp: %.1f\n", temp);

    float vol = max.GetBatteryVoltage();
    trace_printf("Voltage: %.3f\n", vol);

    FATFS fs;
	FIL fil;
	char line[82];
	FRESULT fr;

	int status = f_mount(&fs, "0", 1);

	if (status != FR_OK)
	{
		trace_printf("Mount failed! %u\n", status);
		return 0;
	}

	// Open file
	fr = f_open(&fil, "hello.txt", FA_READ);
	if (fr) return (int)fr;

	// Read all lines
	while (f_gets(line, sizeof(line), &fil))
		trace_printf(line);

	// Close file
	f_close(&fil);

	//char path[] = "/";
	//scan_files(path);

	sAudio.Init();
	sAudio.Play("2on32k.wav", 2);
	//sAudio.Play("bee32k.wav");
	Timer::SetTimeout(HUM, 1000);
	Timer::SetInterval(SWING, 5000);
 */

