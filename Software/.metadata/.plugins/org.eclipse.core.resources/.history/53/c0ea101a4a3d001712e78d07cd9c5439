#include "Audio.h"
#include "stm32f10x.h"

void Audio::Init()
{
	LowLevelInit();
}

void Audio::LowLevelInit()
{
	// System Clocks Configuration
	RCC_Configuration();

	// Once the DAC channel is enabled, the corresponding GPIO pin is automatically connected to the DAC converter. In order to avoid parasitic consumption, the GPIO pin should be configured in analog
	GPIO_Configuration();

	// TIM6 Configuration
	TIM_PrescalerConfig(TIM6, 0, TIM_PSCReloadMode_Update);
	SetSamplingFreq(32000);

	// TIM6 TRGO selection
	TIM_SelectOutputTrigger(TIM6, TIM_TRGOSource_Update);

	// DAC channel1 Configuration
	DAC_InitStructure.DAC_Trigger = DAC_Trigger_T6_TRGO;
	DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
	DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
	DAC_Init(DAC_Channel_1, &DAC_InitStructure);

	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&DAC->DHR12R1;
	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)AudioBuf[CurrentBuf];
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
	DMA_InitStructure.DMA_BufferSize = AudioBufSize/2;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;

	DMA_ITConfig(DMA2_Channel3, DMA_IT_TC, ENABLE);

	DMA_Init(DMA2_Channel3, &DMA_InitStructure);
	// Enable DMA2 Channel3
	DMA_Cmd(DMA2_Channel3, ENABLE);

	// Enable DAC Channel1: Once the DAC channel1 is enabled, PA.04 is automatically connected to the DAC converter.
	DAC_Cmd(DAC_Channel_1, ENABLE);

	// Enable DMA for DAC Channel1
	DAC_DMACmd(DAC_Channel_1, ENABLE);

	// TIM6 enable counter
	TIM_Cmd(TIM6, ENABLE);

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);

	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = DMA2_Channel3_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
}

void Audio::SetSamplingFreq(uint32_t freq)
{
	TIM_SetAutoreload(TIM6, SystemCoreClock/freq - 1);
}

// Global vairable
Audio sAudio;
